name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 6 * * *'

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      NO_ET: 1
      DANDI_ALLOW_LOCALHOST_URLS: 1
      DANDI_TESTS_PERSIST_DOCKER_COMPOSE: "1"
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-18.04
          - macos-latest
        python:
          - 3.7
          - 3.8
          - 3.9
        mode:
          - normal
        include:
          - os: ubuntu-18.04
            python: 3.7
            mode: dandi-api
          - os: ubuntu-18.04
            python: 3.7
            mode: dev-deps
          - os: ubuntu-18.04
            python: 3.7
            mode: dandi-devel
        exclude:
          # Temporarily disabled due to h5py/hdf5 dependency issue
          # See <https://github.com/dandi/dandi-cli/pull/315>
          - os: windows-2019
            python: 3.9

    steps:
    - name: Set up environment
      uses: actions/checkout@v1
      with:
        # Fetch all commits so that versioneer will return something compatible
        # with semantic-version
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Install hdf5 (Ubuntu)
      if: matrix.python == '3.9' && startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y libhdf5-dev

    - name: Install hdf5 (macOS)
      if: matrix.python == '3.9' && startsWith(matrix.os, 'macos')
      run: |
        brew install hdf5@1.8
        brew link hdf5@1.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install ".[test]"

    - name: Install dev version of pynwb
      if: matrix.mode == 'dev-deps'
      run: |
        pip install git+https://github.com/NeurodataWithoutBorders/pynwb

    - name: Set DANDI_DEVEL=1
      if: matrix.mode == 'dandi-devel'
      run: echo DANDI_DEVEL=1 >> "$GITHUB_ENV"

    - name: Run all tests
      if: matrix.mode != 'dandi-api' && github.event_name != 'schedule'
      run: |
        python -m pytest -s -v --cov=dandi --cov-report=xml dandi

    - name: Run all tests (including doctests)
      if: matrix.mode != 'dandi-api' && github.event_name == 'schedule'
      run: |
        python -m pytest -s -v --cov=dandi --cov-report=xml --doctest-modules dandi

    - name: Run Dandi API tests only
      if: matrix.mode == 'dandi-api'
      run: |
        python -m pytest -s -v --cov=dandi --cov-report=xml --dandi-api dandi

    - name: Dump Docker Compose logs
      if: failure()
      run: |
        docker-compose \
          -f dandi/tests/data/dandiarchive-docker/docker-compose.yml \
          logs --timestamps

    - name: Shut down Docker Compose
      run: |
        docker-compose \
          -f dandi/tests/data/dandiarchive-docker/docker-compose.yml \
          down -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        # name: codecov-umbrella
        # yml: ./codecov.yml
        fail_ci_if_error: false
